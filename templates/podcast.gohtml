<!doctype html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" charset="UTF-8">
    <title>AdminDev Labs</title>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.14/semantic.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <link rel="stylesheet" href="static/css/main.css" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Source+Code+Pro&display=swap" rel="stylesheet"> 
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>

  <div class="collapse navbar-collapse" id="navbarSupportedContent">
    <ul class="navbar-nav mr-auto">
      <li class="nav-item">
        <a class="nav-link" href="/"><-- Go Back Home</a>
      </li>
    </ul>
  </div>
</nav>
<div class="hero-image">
    <div class="hero-text">
        <h1>AdminDev Labs</h1>
        <p><strong>Researching Systems Engineering and Computer Science</strong></p>
    </div>
</div>
<hr />
<div class="center">
            <h1>Latest Episode</h1>
            <hr />
        <div class="content">

<iframe style="border: none" src="//html5-player.libsyn.com/embed/episode/id/14676359/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/ff9900/" height="90" width="100%" scrolling="no"  allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>

<h3 id="doug-mcilroy">Doug McIlroy</h3>
<ul>
<li>Make each program do one thing well. To do a new job, build afresh rather than complicate old programs by adding new features.</li>
<li>Expect the output of every program to become the input to another, as yet unknown, program. Don&#39;t clutter output with extraneous information.</li>
<li>Design and build software, even operating systems, to be tried early, ideally within weeks. Don&#39;t hesitate to throw away the clumsy parts and rebuild them.</li>
<li>Use tools in preference to unskilled help to lighten a programming task, even if you have to detour to build the tools and expect to throw some of them out after you&#39;ve finished using them.</li>
</ul>
<h3 id="peter-h-salus">Peter H. Salus</h3>
<ul>
<li>Write programs that do one thing and do it well.</li>
<li>Write programs to work together.</li>
<li>Write programs to handle text streams, because that is a universal interface.</li>
</ul>
<h3 id="rob-pike">Rob Pike</h3>
<ul>
<li>Rule 1. You can&#39;t tell where a program is going to spend its time. Bottlenecks occur in surprising places, so don&#39;t try to second guess and put in a speed hack until you&#39;ve proven that&#39;s where the bottleneck is.</li>
<li>Rule 2. Measure. Don&#39;t tune for speed until you&#39;ve measured, and even then don&#39;t unless one part of the code overwhelms the rest.</li>
<li>Rule 3. Fancy algorithms are slow when n is small, and n is usually small. Fancy algorithms have big constants. Until you know that n is frequently going to be big, don&#39;t get fancy. (Even if n does get big, use Rule 2 first.)</li>
<li>Rule 4. Fancy algorithms are buggier than simple ones, and they&#39;re much harder to implement. Use simple algorithms as well as simple data structures.</li>
<li>Rule 5. Data dominates. If you&#39;ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.</li>
</ul>
<h3 id="dennis-ritchie-and-ken-thompson">Dennis Ritchie and Ken Thompson</h3>
<ul>
<li>Make it easy to write, test, and run programs.</li>
<li>Interactive use instead of batch processing.</li>
<li>Economy and elegance of design due to size constraints</li>
<li>Self-supporting system: all Unix software is maintained under Unix.</li>
</ul>
<h3 id="esr">ESR</h3>
<ul>
<li>Modularity - Write simple parts connected by clean interfaces.</li>
<li>Readable - Programs that are clean and clear.</li>
<li>Composition - Programs connected to programs.</li>
<li>Separation: Separate policy from mechanism; separate interfaces from engines.</li>
<li>Simplicity: Design for simplicity; add complexity only where you must.</li>
<li>Parsimony: Write a big program only when it is clear by demonstration that nothing else will do.</li>
<li>Transparency: Design for visibility to make inspection and debugging easier.</li>
<li>Robust: Robustness is the child of transparency and simplicity.</li>
<li>Representation: Fold knowledge into data so program logic can be stupid and robust.</li>
<li>Least Surprise: In interface design, always do the least surprising thing.</li>
<li>Silence: When a program has nothing surprising to say, it should say nothing.</li>
<li>Repair: When you must fail, fail noisily and as soon as possible.</li>
<li>Economy: Programmer time is expensive; conserve it in preference to machine time.</li>
<li>Generation: Avoid hand-hacking; write programs to write programs when you can.</li>
<li>Optimization: Prototype before polishing. Get it working before you optimize it.</li>
<li>Diversity: Distrust all claims for “one true way”.</li>
<li>Extensibility: Design for the future, because it will be here sooner than you think.</li>
</ul>
<h3 id="does-unix-matter-">Does Unix Matter?</h3>
<ul>
<li>Yes?</li>
<li>We can still learn</li>
<li>Do what makes sense</li>
<li>Simplify everything</li>
<li>Abstraction isn&#39;t the answer</li>
</ul>


<br>
<h3>Episode List</h3>
<a href="http://admindevlabs.libsyn.com/website">AdminDev Labs</a>
        </div>
</body>

<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
</html>


